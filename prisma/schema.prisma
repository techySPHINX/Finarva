generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  email            String            @unique
  name             String?
  password         String?
  role             String            @default("agent")
  createdAt        DateTime          @default(now())

  Client           Client[]
  LearningContent  LearningContent[]
}

model Client {
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  phone                 String               @unique
  language              String              
  age                   Int?
  gender                String?
  income                Float?
  goals                 String[]             // e.g., ["education", "retirement"]

  occupation            String?              
  interests             String[]             
  preferredLanguage     String?           
  investmentExperience  String?              

  createdAt             DateTime             @default(now())
  agentId               String               @db.ObjectId
  agent                 User                 @relation(fields: [agentId], references: [id])

  investments           Investment[]
  quizAttempts          ClientQuizAttempt[]
  learningProgress      LearningProgress[]
  aiRecommendations     AIRecommendation[]

  Insurance Insurance[]
}


model Investment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String   @db.ObjectId
  client        Client   @relation(fields: [clientId], references: [id])
  type          String   // E.g., "Small Cap", "Gold", etc.
  amount        Float
  startDate     DateTime
  status        String   // E.g., "active", "matured", "withdrawn"
  returns       Float?  
  source        String?  // Optional: e.g., "PartnerAPI", "Manual"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Insurance {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId       String   @db.ObjectId
  client         Client   @relation(fields: [clientId], references: [id])
  type           String   // e.g., "life", "health", "crop", "vehicle"
  amount         Float
  premium        Float
  termMonths     Int
  provider       String?  // Optional: e.g., "LIC", "ICICI Lombard"
  status         String   // "active", "expired", "cancelled", etc.
  startDate      DateTime
  endDate        DateTime
  source         String?  // "PartnerAPI", "Manual", etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  claims         InsuranceClaim[]
}

model InsuranceClaim {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  insuranceId   String   @db.ObjectId
  insurance     Insurance @relation(fields: [insuranceId], references: [id])
  claimAmount   Float
  claimDate     DateTime
  reason        String?
  status        String    // "pending", "approved", "rejected"
  createdAt     DateTime  @default(now())
}


model LearningContent {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  type          String   // e.g., "video", "audio", "pdf"
  url           String
  language      String   
  tags          String[] // e.g., ["insurance", "investment"]
  createdById   String   @db.ObjectId
  createdBy     User     @relation(fields: [createdById], references: [id])
  createdAt     DateTime @default(now())

  progress      LearningProgress[]
}

model LearningProgress {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  clientId       String           @db.ObjectId
  contentId      String           @db.ObjectId
  viewedAt       DateTime         @default(now())
  progress       Float           
  lastAccessedAt DateTime         @default(now()) // new field
  client         Client           @relation(fields: [clientId], references: [id])
  content        LearningContent  @relation(fields: [contentId], references: [id])

  @@unique([clientId, contentId]) 
}

model Quiz {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  tags        String[]   // E.g., ['insurance', 'investment']
  language    String     
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String     @db.ObjectId
  questions   Question[]

  ClientQuizAttempt ClientQuizAttempt[]
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String   @db.ObjectId
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  question  String
  options   String[] 
  answer    String   
  language  String
  updatedAt DateTime @updatedAt
}

model ClientQuizAttempt {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId   String   @db.ObjectId
  quizId     String   @db.ObjectId
  score      Int
  answers    String[] 
  createdAt  DateTime @default(now())

  client     Client   @relation(fields: [clientId], references: [id])
  quiz       Quiz     @relation(fields: [quizId], references: [id])
}

model AIRecommendation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String   @db.ObjectId
  type          String   // "quiz", "learning", "investment"
  suggestion    String   
  metadata      Json     // Optional details like topic, confidence
  createdAt     DateTime @default(now())
  client        Client   @relation(fields: [clientId], references: [id])
}
