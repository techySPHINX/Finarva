name: 🔄 Continuous Integration

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop]

env:
  NODE_VERSION: "20"

jobs:
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      tests: ${{ steps.changes.outputs.tests }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**/*.ts'
              - 'prisma/**/*'
              - 'package*.json'
              - 'tsconfig*.json'
            tests:
              - 'test/**/*.ts'
              - 'e2e-tests/**/*.ts'
              - 'jest.config.js'
            docs:
              - '*.md'
              - 'docs/**/*'

  lint:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true' }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install @nestjs/terminus
        run: npm install @nestjs/terminus

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint:check

      - name: 💅 Check Prettier formatting
        run: npm run format:check

      - name: 📊 TypeScript type check
        run: npx tsc --noEmit

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true' }}

    strategy:
      matrix:
        node-version: [18, 20]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: finarva_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 📦 Install @nestjs/terminus
        run: npm install @nestjs/terminus

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finarva_test
        run: |
          npx prisma generate
          npx prisma migrate deploy

      - name: 🧪 Run unit tests
        run: npm run test:cov
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finarva_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: 🔬 Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finarva_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/

  security:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.src == 'true' }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🛡️ Run npm audit
        run: npm audit --audit-level moderate

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ always() && (needs.lint.result == 'success' || needs.lint.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped') }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Generate Prisma client
        run: npx prisma generate

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            node_modules/.prisma/

  docs:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📚 Build documentation
        run: npm run docs:generate

      - name: 📋 Validate README links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"

  summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, docs]
    if: always()

    steps:
      - name: 📋 Generate summary
        run: |
          echo "## 🔄 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧹 Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📚 Docs | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
