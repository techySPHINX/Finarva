{
  "info": {
    "name": "Finarva API - Authentication",
    "description": "Complete authentication endpoints for Finarva platform including signup, login, token refresh, and profile management",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "User Signup",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has user data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('user');",
              "    pm.expect(jsonData.user).to.have.property('id');",
              "    pm.expect(jsonData.user).to.have.property('email');",
              "});",
              "",
              "pm.test('User email matches request', function () {",
              "    const jsonData = pm.response.json();",
              "    const requestData = JSON.parse(pm.request.body.raw);",
              "    pm.expect(jsonData.user.email).to.eql(requestData.email);",
              "});",
              "",
              "// Store user ID for future requests",
              "if (pm.response.code === 201) {",
              "    const responseData = pm.response.json();",
              "    pm.environment.set('userId', responseData.user.id);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/signup",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "signup"]
        },
        "description": "Create a new user account with email and password. Password must meet security requirements (8+ chars, uppercase, lowercase, number)."
      }
    },
    {
      "name": "User Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has tokens', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('access_token');",
              "    pm.expect(jsonData).to.have.property('user');",
              "});",
              "",
              "pm.test('Token is valid JWT format', function () {",
              "    const jsonData = pm.response.json();",
              "    const tokenParts = jsonData.access_token.split('.');",
              "    pm.expect(tokenParts.length).to.eql(3);",
              "});",
              "",
              "// Store auth token for future requests",
              "if (pm.response.code === 200) {",
              "    const responseData = pm.response.json();",
              "    pm.environment.set('authToken', responseData.access_token);",
              "    pm.environment.set('userId', responseData.user.id);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "login"]
        },
        "description": "Authenticate user with email and password. Returns JWT access token for API authorization."
      }
    },
    {
      "name": "Get User Profile",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has user profile data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('email');",
              "    pm.expect(jsonData).to.have.property('role');",
              "});",
              "",
              "pm.test('User ID matches stored value', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.id).to.eql(pm.environment.get('userId'));",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/profile",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "profile"]
        },
        "description": "Get current authenticated user's profile information. Requires valid JWT token."
      }
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  }
}
