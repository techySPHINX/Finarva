# =============================================================================
# FINARVA API - DOCKER COMPOSE DEVELOPMENT ENVIRONMENT
# =============================================================================
# This file sets up a complete development environment with all required services
# Usage: docker-compose up -d

version: "3.8"

services:
  # =============================================================================
  # APPLICATION SERVICE
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: finarva-api
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/finarva_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-development-secret-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finarva-network
    command: npm run start:dev

  # =============================================================================
  # DATABASE SERVICE (PostgreSQL)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: finarva-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: finarva_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finarva-network

  # =============================================================================
  # CACHE & QUEUE SERVICE (Redis)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: finarva-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finarva-network

  # =============================================================================
  # DATABASE ADMINISTRATION (pgAdmin)
  # =============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: finarva-pgadmin
    restart: unless-stopped
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@finarva.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - finarva-network

  # =============================================================================
  # REDIS ADMINISTRATION (RedisInsight)
  # =============================================================================
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: finarva-redis-insight
    restart: unless-stopped
    ports:
      - "${REDIS_INSIGHT_PORT:-8001}:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - finarva-network

  # =============================================================================
  # MONITORING & LOGGING (Optional)
  # =============================================================================
  # Uncomment the following services for monitoring in development

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: finarva-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #   networks:
  #     - finarva-network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: finarva-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - finarva-network

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_insight_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  finarva-network:
    driver: bridge
